import random
import json
import os

# === –ü–ê–†–ê–ú–ï–¢–†–´ –ò–ì–†–´ ===
CLASSES = {
    "–≤–æ–∏–Ω": {"hp": 14, "armor": 16, "attack_bonus": 5},
    "–º–∞–≥": {"hp": 8, "armor": 12, "attack_bonus": 7},
    "–ª—É—á–Ω–∏–∫": {"hp": 10, "armor": 14, "attack_bonus": 6}
}

ITEMS = {
    "–∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è": {"type": "consumable", "heal": 5},
    "–º–µ—á": {"type": "melee", "attack_bonus": 2},
    "—â–∏—Ç": {"type": "melee", "armor": 2},
    "–∫–æ–ª—å—á—É–≥–∞": {"type": "melee", "armor": 3},
    "–ª—É–∫": {"type": "ranged", "attack_bonus": 3},
    "–º–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Å–æ—Ö": {"type": "magic", "attack_bonus": 4}
}

BOSS_LOOT = ["–º–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Å–æ—Ö", "–∫–æ–ª—å—á—É–≥–∞", "–∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è", "–ª—É–∫"]

CLASS_ALLOWED_ITEMS = {
    "–≤–æ–∏–Ω": ["melee", "consumable"],
    "–ª—É—á–Ω–∏–∫": ["ranged", "consumable"],
    "–º–∞–≥": ["magic", "consumable"]
}

ITEM_PRICES = {
    "–∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è": 10,
    "–º–µ—á": 20,
    "—â–∏—Ç": 15,
    "–∫–æ–ª—å—á—É–≥–∞": 25,
    "–ª—É–∫": 20,
    "–º–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Å–æ—Ö": 30
}

NPCS = [
    {"name": "–°—Ç–∞—Ä—ã–π —Å—Ç—Ä–∞–Ω–Ω–∏–∫", "quest": "—É–±–µ–π—Ç–µ 1 –≤—Ä–∞–≥–∞", "reward_exp": 20, "reward_gold": 10},
    {"name": "–ë—Ä–æ–¥—è—á–∏–π —Ç–æ—Ä–≥–æ–≤–µ—Ü", "quest": "–Ω–∞–π–¥–∏—Ç–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è", "reward_exp": 15, "reward_item": "–∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è"},
    {"name": "–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥—É—Ö", "quest": "–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã 1 –±–æ–π", "reward_exp": 25, "reward_item": "–º–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Å–æ—Ö"},
    {"name": "–¢–∞–π–Ω—ã–π —à–ø–∏–æ–Ω", "quest": "–ø—Ä–æ–π–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –±–µ–∑ –±–æ—è", "reward_gold": 30}
]

ENEMIES = [
    {"name": "–ì–æ–±–ª–∏–Ω", "hp": 8, "armor": 13, "attack_bonus": 4, "exp": 10, "gold": 5},
    {"name": "–°–∫–µ–ª–µ—Ç", "hp": 10, "armor": 14, "attack_bonus": 5, "exp": 15, "gold": 7},
    {"name": "–¢—Ä–æ–ª–ª—å", "hp": 16, "armor": 15, "attack_bonus": 6, "exp": 25, "gold": 10},
    {"name": "–ë–æ–ª—å—à–æ–π –ø–∞—É–∫", "hp": 12, "armor": 12, "attack_bonus": 5, "exp": 20, "gold": 8},
    {"name": "–ó–æ–º–±–∏", "hp": 14, "armor": 13, "attack_bonus": 5, "exp": 18, "gold": 9},
    {"name": "–û–≥—Ä", "hp": 22, "armor": 16, "attack_bonus": 7, "exp": 35, "gold": 20},

    
    {"name": "–ö–∞–ø–∏—Ç–∞–Ω –ì–æ–±–ª–∏–Ω–æ–≤", "hp": 30, "armor": 17, "attack_bonus": 8, "exp": 100, "gold": 50, "is_boss": True},
    {"name": "–õ–∏—á", "hp": 40, "armor": 18, "attack_bonus": 9, "exp": 150, "gold": 100, "is_boss": True},
    {"name": "–î—Ä–∞–∫–æ–Ω", "hp": 60, "armor": 20, "attack_bonus": 12, "exp": 300, "gold": 200, "is_boss": True}
]

DUNGEON_LEVELS = [
    [ENEMIES[0]],                         # –£—Ä–æ–≤–µ–Ω—å 1
    [ENEMIES[0], ENEMIES[1]],             # –£—Ä–æ–≤–µ–Ω—å 2
    [ENEMIES[1], ENEMIES[2]],             # –£—Ä–æ–≤–µ–Ω—å 3
    [ENEMIES[2], ENEMIES[3]],             # –£—Ä–æ–≤–µ–Ω—å 4
    [ENEMIES[5]],                         # –£—Ä–æ–≤–µ–Ω—å 5 
    [ENEMIES[3], ENEMIES[4], ENEMIES[5]], # –£—Ä–æ–≤–µ–Ω—å 6
    [ENEMIES[4], ENEMIES[5]],             # –£—Ä–æ–≤–µ–Ω—å 7
    [ENEMIES[6]],                         # –£—Ä–æ–≤–µ–Ω—å 8 
    [ENEMIES[6], ENEMIES[0], ENEMIES[1]], # –£—Ä–æ–≤–µ–Ω—å 9
    [ENEMIES[7]]                          # –£—Ä–æ–≤–µ–Ω—å 10 
]

SAVE_FILE = "save.json"
MAX_LEVEL = 10
# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def roll_d20():
    return random.randint(1, 20)


def save_game(player):
    with open(SAVE_FILE, "w") as f:
        json.dump(player, f)
    print("–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n")


def load_game():
    if not os.path.exists(SAVE_FILE):
        print("–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.\n")
        return None
    with open(SAVE_FILE, "r") as f:
        player = json.load(f)
    print("–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    print(f"–ö–ª–∞—Å—Å: {player['class'].capitalize()}, HP: {player['current_hp']}/{player['max_hp']}, –£—Ä–æ–≤–µ–Ω—å: {player['level']}\n")
    return player
# === –°–û–ó–î–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ê ===
def create_character():
    print("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:")
    for cls in CLASSES:
        print(f"- {cls.capitalize()}")
    while True:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").lower()
        if choice in CLASSES:
            stats = CLASSES[choice]
            player = {
                "class": choice,
                "max_hp": stats["hp"],
                "current_hp": stats["hp"],
                "armor": stats["armor"],
                "attack_bonus": stats["attack_bonus"],
                "gold": 0,
                "level": 1,
                "experience": 0,
                "inventory": []
            }
            print(f"\n–í—ã –≤—ã–±—Ä–∞–ª–∏ {choice.capitalize()}!")
            print(f"HP: {player['current_hp']}, –ë—Ä–æ–Ω—è: {player['armor']}, –ê—Ç–∞–∫–∞: +{player['attack_bonus']}\n")
            return player
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# === –ë–û–ô –° –í–†–ê–ì–û–ú ===
def combat(player, enemy):
    print(f"\n–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ {enemy['name']}!")
    if enemy.get("is_boss", False):
        print(f"‚ö†Ô∏è –≠—Ç–æ –±–æ—Å—Å —É—Ä–æ–≤–Ω—è {player['level']}! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Ç—è–∂—ë–ª–æ–º—É –±–æ—é.")

    while player["current_hp"] > 0 and enemy["hp"] > 0:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        print("\n--- –ë–û–ô ---")
        print(f"{enemy['name']} ‚Äî {enemy['hp']} HP | –í—ã ‚Äî {player['current_hp']} HP")
        print("–ß—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ?")
        print("1. –ê—Ç–∞–∫–æ–≤–∞—Ç—å")
        print("2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
        print("3. –£–±–µ–∂–∞—Ç—å")

        choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")

        if choice == "1":
            attack_roll = roll_d20() + player["attack_bonus"]
            print(f"\n–í—ã –±—Ä–æ—Å–∞–µ—Ç–µ –∫—É–±–∏–∫ –∞—Ç–∞–∫–∏: {attack_roll - player['attack_bonus']} + {player['attack_bonus']} = {attack_roll}")
            if attack_roll >= enemy["armor"]:
                dmg = random.randint(1, 6) + 1
                print(f"üéØ –í—ã –ø–æ–ø–∞–ª–∏! –ù–∞–Ω–µ—Å–µ–Ω–æ {dmg} —É—Ä–æ–Ω–∞.")
                enemy["hp"] -= dmg
            else:
                print("‚ùå –ü—Ä–æ–º–∞—Ö!")

        elif choice == "2":
            use_item(player)
            continue

        elif choice == "3":
            print("–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —É–±–µ–∂–∞—Ç—å...")
            if random.random() < 0.5:
                print("üéâ –í–∞–º —É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å!")
                return False
            else:
                print("üõë –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–±–µ–∂–∞—Ç—å. –í—Ä–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø—É—Ç—å.")
                pass
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            continue

        if enemy["hp"] <= 0:
            print(f"\nüíÄ {enemy['name']} –ø–æ–≤–µ—Ä–∂–µ–Ω!")
            gain_exp(player, enemy["exp"])
            loot_gold(player, enemy)
            if enemy.get("is_boss"):
                print("üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Å–æ–±—É—é –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –ø–æ–±–µ–¥—É –Ω–∞–¥ –±–æ—Å—Å–æ–º!")
                special_boss_loot(player, enemy)
            return True

        # –•–æ–¥ –≤—Ä–∞–≥–∞
        attack_roll_enemy = roll_d20() + enemy["attack_bonus"]
        print(f"\n{enemy['name']} –±—Ä–æ—Å–∞–µ—Ç –∞—Ç–∞–∫—É: {attack_roll_enemy - enemy['attack_bonus']} + {enemy['attack_bonus']} = {attack_roll_enemy}")
        if attack_roll_enemy >= player["armor"]:
            dmg = random.randint(1, 6)
            print(f"üí• {enemy['name']} —É–¥–∞—Ä–∏–ª –≤–∞—Å! –ü–æ–ª—É—á–µ–Ω–æ {dmg} —É—Ä–æ–Ω–∞.")
            player["current_hp"] -= dmg
        else:
            print(f"{enemy['name']} –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è!")

        if player["current_hp"] <= 0:
            print("‚ò†Ô∏è –í—ã –ø–æ–≥–∏–±–ª–∏... –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
            exit()

    return False
    
# === –°–ò–°–¢–ï–ú–ê –û–ü–´–¢–ê –ò –£–†–û–í–ù–ï–ô ===
def gain_exp(player, amount):
    player["experience"] += amount
    print(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {amount} –æ–ø—ã—Ç–∞.")
    level_up(player)


def level_up(player):
    exp_needed = player["level"] * 20
    while player["experience"] >= exp_needed:
        player["experience"] -= exp_needed
        player["level"] += 1
        player["max_hp"] += 2
        player["current_hp"] = player["max_hp"]
        player["attack_bonus"] += 1
        print(f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è {player['level']}!")
        print(f"HP —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {player['max_hp']}, –ê—Ç–∞–∫–∞: +{player['attack_bonus']}\n")
        if player["level"] >= MAX_LEVEL:
            print("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è! –ü–æ–¥–∑–µ–º–µ–ª—å–µ –ø–æ–±–µ–∂–¥–µ–Ω–æ!")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            exit()
        exp_needed = player["level"] * 20 

# === –°–£–ù–î–£–ö–ò –ò –ò–ù–í–ï–ù–¢–ê–†–¨ ===
def open_chest(player):
    allowed_types = CLASS_ALLOWED_ITEMS[player["class"]]
    possible_items = [name for name, data in ITEMS.items() if data["type"] in allowed_types]
    
    if not possible_items:
        print("–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî —Å—É–Ω–¥—É–∫ –ø—É—Å—Ç.")
        return

    item = random.choice(possible_items)
    print(f"–í—ã –Ω–∞—à–ª–∏: {item}!")
    if input("–í–∑—è—Ç—å? (–¥–∞/–Ω–µ—Ç): ").lower() == "–¥–∞":
        player["inventory"].append(item)
        print(f"{item} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.")


def use_item(player):
    if not player["inventory"]:
        print("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.")
        return

    allowed_types = CLASS_ALLOWED_ITEMS[player["class"]]
    print("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:")
    valid_indices = []
    for i, item_name in enumerate(player["inventory"]):
        item_type = ITEMS[item_name]["type"]
        if item_type in allowed_types:
            print(f"{i+1}. {item_name} ({item_type})")
            valid_indices.append(i)
        else:
            print(f"{i+1}. {item_name} (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞)")

    try:
        choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞: ")) - 1
        if choice not in valid_indices:
            print("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç.")
            return

        item_name = player["inventory"][choice]
        item = ITEMS[item_name]

        if "heal" in item:
            healed = min(item["heal"], player["max_hp"] - player["current_hp"])
            player["current_hp"] += healed
            print(f"–í—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ {healed} HP.")

        if "attack_bonus" in item:
            player["attack_bonus"] += item["attack_bonus"]
            print(f"–ê—Ç–∞–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {item['attack_bonus']}.")

        if "armor" in item:
            player["armor"] += item["armor"]
            print(f"–ë—Ä–æ–Ω—è —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {item['armor']}.")

        print("–ü—Ä–µ–¥–º–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        player["inventory"].pop(choice)

    except (IndexError, ValueError):
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")

def loot_gold(player, enemy):
    gold = enemy.get("gold", 0)
    if gold > 0:
        print(f"{enemy['name']} –æ—Å—Ç–∞–≤–∏–ª {gold} –∑–æ–ª–æ—Ç—ã—Ö.")
        player["gold"] += gold

def show_status(player):
    print(f"\n--- –°—Ç–∞—Ç—É—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ---")
    print(f"–ö–ª–∞—Å—Å: {player['class'].capitalize()}")
    print(f"HP: {player['current_hp']}/{player['max_hp']}")
    print(f"–ë—Ä–æ–Ω—è: {player['armor']}")
    print(f"–ê—Ç–∞–∫–∞: +{player['attack_bonus']}")
    print(f"–ó–æ–ª–æ—Ç–æ: {player['gold']} –º–æ–Ω–µ—Ç")
    print(f"–£—Ä–æ–≤–µ–Ω—å: {player['level']} | –û–ø—ã—Ç: {player['experience']}")
    print("------------------------\n")

# === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ò–ì–†–´ ===
def dungeon_adventure(player):
    current_level = 1
    max_levels = len(DUNGEON_LEVELS)

    while current_level <= max_levels:
        print(f"\n--- –£—Ä–æ–≤–µ–Ω—å {current_level} –ø–æ–¥–∑–µ–º–µ–ª—å—è ---")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: –æ—Ç 1 –¥–æ 3, –Ω–æ –Ω–∞ 5 –∏ 10 —É—Ä–æ–≤–Ω–µ —Ç–æ–ª—å–∫–æ 1
        if current_level in [5, 10]:
            total_rooms = 1
        else:
            total_rooms = random.randint(1, 3)
        
        rooms_cleared = 0

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –Ω–∞ —É—Ä–æ–≤–Ω–µ
        print(f"–ù–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ {total_rooms} {'–∫–æ–º–Ω–∞—Ç–∞' if total_rooms == 1 else '–∫–æ–º–Ω–∞—Ç—ã'}.")

        # –í—ã–∑–æ–≤ —Ç–æ—Ä–≥–æ–≤—Ü–∞ –Ω–∞ 3 –∏ 8 —É—Ä–æ–≤–Ω–µ
        if current_level in [3, 8] and total_rooms > 0:
            print("–í—ã –≤—Ö–æ–¥–∏—Ç–µ –≤ —Ç—ë–º–Ω—É—é –ø–µ—â–µ—Ä—É... –∏ –≤–∏–¥–∏—Ç–µ –∫–æ–≥–æ-—Ç–æ –≤–¥–∞–ª–µ–∫–µ.")
            visit_merchant(player)

        while rooms_cleared < total_rooms:
            show_status(player)
            print("\n1. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥")
            print("2. –û—Ç–¥–æ—Ö–Ω—É—Ç—å")
            print("3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
            print("4. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É")
            print("5. –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã")
            choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")

            if choice == "1":
                rooms_cleared += 1
                print(f"\n–í—ã –≤—Ö–æ–¥–∏—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç—É #{rooms_cleared} –Ω–∞ —É—Ä–æ–≤–Ω–µ {current_level}.")

                # –ï—Å–ª–∏ —ç—Ç–æ —É—Ä–æ–≤–µ–Ω—å —Å –±–æ—Å—Å–æ–º –∏ –ø–µ—Ä–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ ‚Äî –≤—ã–∑–æ–≤ –±–æ—Å—Å–∞
                if current_level in [5, 10] and rooms_cleared == 1:
                    boss_candidates = [e for e in DUNGEON_LEVELS[current_level - 1] if e.get("is_boss", False)]
                    if boss_candidates:
                        enemy = boss_candidates[0].copy()
                        print(f"‚ö†Ô∏è –ù–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ –≤–∞—Å –∂–¥—ë—Ç –±–æ—Å—Å: {enemy['name']}!")
                        combat(player, enemy)
                        show_status(player)
                    else:
                        print("–û—à–∏–±–∫–∞: –±–æ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                        exit()
                    continue  # –ü–æ—Å–ª–µ –±–æ—è —Å –±–æ—Å—Å–æ–º –º—ã –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

                # –°–ª—É—á–∞–π–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏
                event_chance = random.random()

                if event_chance < 0.6:  # 60% ‚Äî –±–æ–π
                    possible_enemies = [e for e in DUNGEON_LEVELS[current_level - 1] if not e.get("is_boss", False)]
                    if possible_enemies:
                        enemy = random.choice(possible_enemies).copy()
                        combat(player, enemy)
                    else:
                        print("–í—ã –≤—Ö–æ–¥–∏—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç—É... –Ω–æ –∑–¥–µ—Å—å —Ç–∏—Ö–æ.")

                elif event_chance < 0.8:  # 20% ‚Äî –≤—Å—Ç—Ä–µ—á–∞–µ—Ç–µ NPC
                    encounter_npc(player)

                else:  # 20% ‚Äî –Ω–∞—Ö–æ–¥–∏—Ç–µ —Å—É–Ω–¥—É–∫
                    print("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ —Å—É–Ω–¥—É–∫!")
                    open_chest(player)

            elif choice == "2":
                print("–í—ã –æ—Ç–¥—ã—Ö–∞–µ—Ç–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è.")
                heal_amount = min(3, player["max_hp"] - player["current_hp"])
                player["current_hp"] += heal_amount
                print(f"–í—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ {heal_amount} HP.")

                if current_level >= 3 and random.random() < 0.3:
                    print("–í–æ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –≤–∞—Å –∞—Ç–∞–∫—É–µ—Ç –≤—Ä–∞–≥!")
                    enemy = random.choice(DUNGEON_LEVELS[current_level - 1]).copy()
                    combat(player, enemy)
                else:
                    show_status(player)

            elif choice == "3":
                use_item(player)

            elif choice == "4":
                save_game(player)

            elif choice == "5":
                print("–î–æ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!")
                return

            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        print(f"\n–í—ã –ø—Ä–æ—à–ª–∏ —É—Ä–æ–≤–µ–Ω—å {current_level}!")
        current_level += 1

    print("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å—ë –ø–æ–¥–∑–µ–º–µ–ª—å–µ –∏ –ø–æ–±–µ–¥–∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞!")
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

def special_boss_loot(player, enemy):
    item = random.choice(BOSS_LOOT)
    print(f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ –º–æ—â–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: {item}!")
    player["inventory"].append(item)

    ITEMS.update({
    "–æ–≥–Ω–µ–Ω–Ω—ã–π –º–µ—á": {"type": "melee", "attack_bonus": 4},
    "–ª–µ–¥—è–Ω–æ–π –ø–æ—Å–æ—Ö": {"type": "magic", "attack_bonus": 5},
    "—â–∏—Ç –∫–æ—Ä–æ–ª—è": {"type": "melee", "armor": 5},
    "–ø–ª–∞—â –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏": {"type": "ranged", "armor": 4},
    "–¥—Ä–µ–≤–Ω–∏–π –ª—É–∫": {"type": "ranged", "attack_bonus": 5}
})

def encounter_npc(player):
    npc = random.choice(NPCS)
    print(f"\n–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ {npc['name']}!")
    print(f"{npc['name']} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –∑–∞–¥–∞–Ω–∏–µ: '{npc['quest']}'")
    choice = input("–ü—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ? (–¥–∞/–Ω–µ—Ç): ").lower()
    if choice != "–¥–∞":
        print("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–¥–∞–Ω–∏—è.")
        return

    print("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–¥–∞–Ω–∏–µ.")

    # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç—ã—Ö —É—Å–ª–æ–≤–∏–π –∑–∞–¥–∞–Ω–∏–π
    if "—É–±–µ–π—Ç–µ" in npc["quest"]:
        print("–ó–∞–¥–∞—á–∞: –ø–æ–±–µ–¥–∏—Ç–µ 1 –≤—Ä–∞–≥–∞.")
        enemy = random.choice(DUNGEON_LEVELS[player["level"] % len(DUNGEON_LEVELS)]).copy()
        if combat(player, enemy):
            print("–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ!")
            player["experience"] += npc.get("reward_exp", 0)
            player["gold"] += npc.get("reward_gold", 0)
            if "reward_item" in npc:
                player["inventory"].append(npc["reward_item"])
                print(f"–ù–∞–≥—Ä–∞–¥–∞: –ø–æ–ª—É—á–µ–Ω–æ {npc['reward_item']}")

    elif "–Ω–∞–π–¥–∏—Ç–µ" in npc["quest"]:
        print("–ó–∞–¥–∞—á–∞: –Ω–∞–π–¥–∏—Ç–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è.")
        found = False
        for _ in range(3):
            if random.random() < 0.4:
                print("–í—ã –Ω–∞—à–ª–∏ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è!")
                player["inventory"].append("–∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è")
                found = True
                break
            else:
                input("–ò—Å–∫–∞—Ç—å –¥–∞–ª—å—à–µ... –ù–∞–∂–º–∏—Ç–µ Enter.")
        if found:
            player["experience"] += npc.get("reward_exp", 0)
            player["gold"] += npc.get("reward_gold", 0)
            print("–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ!")

    elif "–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ" in npc["quest"]:
        print("–ó–∞–¥–∞—á–∞: –ø—Ä–æ–π–¥–∏—Ç–µ –±–æ–π –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
        enemy = random.choice(DUNGEON_LEVELS[player["level"] % len(DUNGEON_LEVELS)]).copy()
        use_item_before = player["inventory"][:]
        won = combat(player, enemy)
        if won and use_item_before == player["inventory"]:
            print("–í—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç—ã ‚Äî –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
            player["experience"] += npc.get("reward_exp", 0)
            if "reward_item" in npc:
                player["inventory"].append(npc["reward_item"])

    elif "–±–µ–∑ –±–æ—è" in npc["quest"]:
        print("–ó–∞–¥–∞—á–∞: –ø—Ä–æ–π–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –±–µ–∑ –±–æ—è.")
        print("‚ö†Ô∏è –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤ –∫–æ–Ω—Ü–µ —É—Ä–æ–≤–Ω—è.")
        player["current_quest"] = "no_combat"
        player["quest_complete"] = False
# === –ü–æ—è–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—Ü–∞ ===
def visit_merchant(player):
    print("\n--- –í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ —Ç–æ—Ä–≥–æ–≤—Ü–∞ ---")
    while True:
        print("\n1. –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
        print("2. –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
        print("3. –í—ã–π—Ç–∏")
        choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")

        if choice == "1":
            print("\n–ù–∞ –ø—Ä–æ–¥–∞–∂–µ:")
            for i, (item, price) in enumerate(ITEM_PRICES.items()):
                print(f"{i+1}. {item} ‚Äî {price} –∑–æ–ª–æ—Ç—ã—Ö")

            try:
                buy_choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ")) - 1
                item_name = list(ITEM_PRICES.keys())[buy_choice]
                price = ITEM_PRICES[item_name]

                if player["gold"] >= price:
                    player["inventory"].append(item_name)
                    player["gold"] -= price
                    print(f"–í—ã –∫—É–ø–∏–ª–∏ {item_name} –∑–∞ {price} –∑–æ–ª–æ—Ç—ã—Ö.")
                else:
                    print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞.")
            except (IndexError, ValueError):
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")

        elif choice == "2":
            if not player["inventory"]:
                print("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.")
                continue

            print("\n–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:")
            for i, item in enumerate(player["inventory"]):
                price = ITEM_PRICES.get(item, 5)
                print(f"{i+1}. {item} ‚Äî {price // 2} –∑–æ–ª–æ—Ç—ã—Ö")

            try:
                sell_choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: ")) - 1
                item = player["inventory"][sell_choice]
                price = ITEM_PRICES.get(item, 5) // 2

                confirm = input(f"–ü—Ä–æ–¥–∞—Ç—å {item} –∑–∞ {price} –∑–æ–ª–æ—Ç—ã—Ö? (–¥–∞/–Ω–µ—Ç): ").lower()
                if confirm == "–¥–∞":
                    player["inventory"].pop(sell_choice)
                    player["gold"] += price
                    print(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {price} –∑–æ–ª–æ—Ç—ã—Ö –∑–∞ {item}.")
            except (IndexError, ValueError):
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")

        elif choice == "3":
            print("–í—ã –ø–æ–∫–∏–¥–∞–µ—Ç–µ —Ç–æ—Ä–≥–æ–≤—Ü–∞.")
            break

        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
# === –ó–ê–ü–£–°–ö –ò–ì–†–´ ===
def main():
    print("=== –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–æ–¥–∑–µ–º–µ–ª—å–µ ===\n")
    print("1. –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É")
    print("2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É")
    print("3. –í—ã–π—Ç–∏")
    choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")

    if choice == "1":
        player = create_character()
    elif choice == "2":
        player = load_game()
        if not player:
            player = create_character()
    elif choice == "3":
        print("–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã.")
        return
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    dungeon_adventure(player)


if __name__ == "__main__":
    main()
